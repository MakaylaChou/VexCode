{"mode":"Blocks","hardwareTarget":"brain","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable type=\"boolean\" id=\"4FEI3O]Jgj,ab}|[R{(w\">Spinning</variable><variable id=\"_2.^beQjx|FGt38A,8(E\">myVariable</variable><variable id=\"5~{Mk.TwLpiT;k|nheb(\">BucketPosition</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"10\" y=\"-50\"><next><block type=\"iq_variables_set_variable\" id=\"5(Fu]?SNEMvq.jQI9|-U\"><field name=\"VARIABLE\" id=\"5~{Mk.TwLpiT;k|nheb(\">BucketPosition</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"+W6w;vNy}Q`$AappnqOI\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_motion_set_motor_position\" id=\"`M,6v)-Fvtpo[/3o);71\"><field name=\"MOTOR\">Bucket</field><field name=\"UNITS\">rev</field><value name=\"DEGS\"><shadow type=\"math_number\" id=\"cXWWON{{._?v`NPe.xq?\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_motion_set_motor_velocity\" id=\"5`h1j77~X`6;8#6q|k9(\"><field name=\"MOTOR\">Bucket</field><field name=\"UNITS\">pct</field><value name=\"VELOCITY\"><shadow type=\"math_number\" id=\"?c7]T0qIv!-5x09M3L[O\"><field name=\"NUM\">100</field></shadow></value></block></next></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"8$5~Bm@{!Wn8Ii]e?qq?\" x=\"510\" y=\"-30\"><field name=\"BUTTON\">ButtonFUp</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin_to_position\" id=\"Vx{TGHt;hDaMAk1ODRQU\"><field name=\"MOTOR\">Bucket</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"ibw=HJ4DK(`Qicw{]Y58\"><field name=\"NUM\">0.9</field></shadow></value><next><block type=\"iq_variables_set_variable\" id=\"4!ph5fqtx90Fy6A:|j;^\"><field name=\"VARIABLE\" id=\"5~{Mk.TwLpiT;k|nheb(\">BucketPosition</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"go|hviDBgxE6~=9Zjx#;\"><field name=\"NUM\">1</field></shadow></value></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"a~{]W[j=?xusA6#WecwL\" x=\"510\" y=\"170\"><field name=\"BUTTON\">ButtonEDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_motion_spin_to_position\" id=\"Q)RVG2$OPLJ-y@X/#F@4\"><field name=\"MOTOR\">Bucket</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">false</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"WV~JC)6|^Xwv?hY?#)m@\"><field name=\"NUM\">0</field></shadow></value><next><block type=\"iq_variables_set_variable\" id=\"?2,2JOfd^}HoU9KD/U={\"><field name=\"VARIABLE\" id=\"5~{Mk.TwLpiT;k|nheb(\">BucketPosition</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"P-TQLz$.qmTk2c|bV!2e\"><field name=\"NUM\">0</field></shadow></value></block></next></block></next></block><block type=\"iq_events_when_controller_button\" id=\"W1.I3z6f]ErT{]mU]Ou^\" x=\"510\" y=\"410\"><field name=\"BUTTON\">ButtonFDown</field><field name=\"EVENTTYPE\">pressed</field><next><block type=\"iq_control_if_elseif_else\" id=\"l8=qqe6ze1*kQc0F@2C9\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" branches=\"2\"></mutation><value name=\"CONDITION1\"><block type=\"iq_operator_less_than\" id=\"1Q:H21G}LzX1PG7^j733\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"3y)y=@=Qt]BG$r**ae,s\"><field name=\"NUM\">0</field></shadow><block type=\"iq_variables_variable\" id=\"v|wa60*]G1McWzB])a(6\"><field name=\"VARIABLE\" id=\"5~{Mk.TwLpiT;k|nheb(\">BucketPosition</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"i4p:Eg:;f{qa{$HiM]/9\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"SUBSTACK1\"><block type=\"iq_motion_spin_to_position\" id=\"s**t72+Yd`j-k=~rk5FS\"><field name=\"MOTOR\">Bucket</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">true</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"Fd7W#)}i`3/7uV{GfZbq\"><field name=\"NUM\">1.8</field></shadow></value><next><block type=\"iq_variables_set_variable\" id=\"n%y1fWabsSU]p[XR^c[Y\"><field name=\"VARIABLE\" id=\"5~{Mk.TwLpiT;k|nheb(\">BucketPosition</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\")}jIDb($=#==h++k+?/s\"><field name=\"NUM\">2</field></shadow></value></block></next></block></statement><value name=\"CONDITION2\"><block type=\"iq_operator_equal_to\" id=\"~?{[!Hhx^qi+K8?%i3{x\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"0aX*=4AEJ,D9zK2h3z2#\"><field name=\"NUM\">0</field></shadow><block type=\"iq_variables_variable\" id=\"D%j{L}pWJ*$$oiK^E@DI\"><field name=\"VARIABLE\" id=\"5~{Mk.TwLpiT;k|nheb(\">BucketPosition</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\")T`VK#WaMH[:n9.yW{(C\"><field name=\"NUM\">2</field></shadow></value></block></value><statement name=\"SUBSTACK2\"><block type=\"iq_motion_spin_to_position\" id=\"w=%F(_mKx0=2jyJPr:I2\"><field name=\"MOTOR\">Bucket</field><field name=\"UNITS\">rev</field><field name=\"anddontwait_mutator\">true</field><value name=\"AMOUNT\"><shadow type=\"math_number\" id=\"?VxC0RiA1~W%O8vV/:;!\"><field name=\"NUM\">2.1</field></shadow></value><next><block type=\"iq_variables_set_variable\" id=\"BG+!Ag/8Dwb!GF}Csn=1\"><field name=\"VARIABLE\" id=\"5~{Mk.TwLpiT;k|nheb(\">BucketPosition</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"fjjRg]_bRATuebH!rwi+\"><field name=\"NUM\">3</field></shadow></value></block></next></block></statement><statement name=\"SUBSTACK_ELSE\"><block type=\"iq_variables_set_variable\" id=\"%onp[%PyeR6KA-Eb`TuW\"><field name=\"VARIABLE\" id=\"5~{Mk.TwLpiT;k|nheb(\">BucketPosition</field><value name=\"VALUE\"><shadow type=\"math_number\" id=\"v8kkbRM(wM$bisOy}@1x\"><field name=\"NUM\">3</field></shadow></value></block></statement></block></next></block></xml>","robotConfig":[{"port":[3,4,null],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"3:2","direction":"rev","gyroType":"none","width":"380","unit":"mm","wheelbase":"380","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"split"},"triportSourcePort":22},{"port":[10,12],"name":"Bucket","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","motor_a_reversed":"false","motor_b_reversed":"true"},"triportSourcePort":22},{"port":[9],"name":"Escalator","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[11],"name":"Flywheel","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":1,"platform":"IQ","sdkVersion":"20230818.11.00.00","appVersion":"4.0.3","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"Second","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT3, 1.5, true);\nmotor RightDriveSmart = motor(PORT4, 1.5, false);\ndrivetrain Drivetrain = drivetrain(LeftDriveSmart, RightDriveSmart, 200, 380, 380, mm, 1);\ncontroller Controller = controller();\nmotor BucketMotorA = motor(PORT10, false);\nmotor BucketMotorB = motor(PORT12, true);\nmotor_group Bucket = motor_group(BucketMotorA, BucketMotorB);\n\nmotor Escalator = motor(PORT9, false);\nmotor Flywheel = motor(PORT11, false);\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed); \n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n// define variables used for controlling motors based on controller inputs\nbool DrivetrainLNeedsToBeStopped_Controller = true;\nbool DrivetrainRNeedsToBeStopped_Controller = true;\n\n// define a task that will handle monitoring inputs from Controller\nint rc_auto_loop_function_Controller() {\n  // process the controller input every 20 milliseconds\n  // update the motors based on the input values\n  while(true) {\n    if(RemoteControlCodeEnabled) {\n      \n      // calculate the drivetrain motor velocities from the controller joystick axies\n      // left = AxisA + AxisC\n      // right = AxisA - AxisC\n      int drivetrainLeftSideSpeed = Controller.AxisA.position() + Controller.AxisC.position();\n      int drivetrainRightSideSpeed = Controller.AxisA.position() - Controller.AxisC.position();\n      \n      // check if the value is inside of the deadband range\n      if (drivetrainLeftSideSpeed < 5 && drivetrainLeftSideSpeed > -5) {\n        // check if the left motor has already been stopped\n        if (DrivetrainLNeedsToBeStopped_Controller) {\n          // stop the left drive motor\n          LeftDriveSmart.stop();\n          // tell the code that the left motor has been stopped\n          DrivetrainLNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the left motor nexttime the input is in the deadband range\n        DrivetrainLNeedsToBeStopped_Controller = true;\n      }\n      // check if the value is inside of the deadband range\n      if (drivetrainRightSideSpeed < 5 && drivetrainRightSideSpeed > -5) {\n        // check if the right motor has already been stopped\n        if (DrivetrainRNeedsToBeStopped_Controller) {\n          // stop the right drive motor\n          RightDriveSmart.stop();\n          // tell the code that the right motor has been stopped\n          DrivetrainRNeedsToBeStopped_Controller = false;\n        }\n      } else {\n        // reset the toggle so that the deadband code knows to stop the right motor next time the input is in the deadband range\n        DrivetrainRNeedsToBeStopped_Controller = true;\n      }\n      \n      // only tell the left drive motor to spin if the values are not in the deadband range\n      if (DrivetrainLNeedsToBeStopped_Controller) {\n        LeftDriveSmart.setVelocity(drivetrainLeftSideSpeed, percent);\n        LeftDriveSmart.spin(forward);\n      }\n      // only tell the right drive motor to spin if the values are not in the deadband range\n      if (DrivetrainRNeedsToBeStopped_Controller) {\n        RightDriveSmart.setVelocity(drivetrainRightSideSpeed, percent);\n        RightDriveSmart.spin(forward);\n      }\n    }\n    // wait before repeating the process\n    wait(20, msec);\n  }\n  return 0;\n}\n\ntask rc_auto_loop_task_Controller(rc_auto_loop_function_Controller);\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable, BucketPosition;\n\nbool Spinning;\n\n// \"when started\" hat block\nint whenStarted1() {\n  BucketPosition = 0.0;\n  Bucket.setPosition(0.0, turns);\n  Bucket.setVelocity(100.0, percent);\n  return 0;\n}\n\n// \"when Controller ButtonFUp pressed\" hat block\nvoid onevent_ControllerButtonFUp_pressed_0() {\n  Bucket.spinToPosition(0.9, turns, true);\n  BucketPosition = 1.0;\n}\n\n// \"when Controller ButtonEDown pressed\" hat block\nvoid onevent_ControllerButtonEDown_pressed_0() {\n  Bucket.spinToPosition(0.0, turns, true);\n  BucketPosition = 0.0;\n}\n\n// \"when Controller ButtonFDown pressed\" hat block\nvoid onevent_ControllerButtonFDown_pressed_0() {\n  if (BucketPosition < 2.0) {\n    Bucket.spinToPosition(1.8, turns, false);\n    BucketPosition = 2.0;\n  } else if (BucketPosition == 2.0) {\n    Bucket.spinToPosition(2.1, turns, false);\n    BucketPosition = 3.0;\n  } else {\n    BucketPosition = 3.0;\n  }\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // register event handlers\n  Controller.ButtonFUp.pressed(onevent_ControllerButtonFUp_pressed_0);\n  Controller.ButtonEDown.pressed(onevent_ControllerButtonEDown_pressed_0);\n  Controller.ButtonFDown.pressed(onevent_ControllerButtonFDown_pressed_0);\n\n  wait(15, msec);\n  whenStarted1();\n}","target":"Physical"}